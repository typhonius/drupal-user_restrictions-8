<?php

/**
 * @file
 * Contains \Drupal\user_restrictions\UserRestrictionsController
 */

namespace Drupal\user_restrictions;

use \Drupal\Core\Entity\ContentEntityFormController;
use \Drupal\Core\Entity\EntityManagerInterface;
use \Drupal\user_restrictions\Entity\UserRestrictions;

/**
 * {@inheritdoc}
 */
class UserRestrictionsController extends ContentEntityFormController {

  /**
   * {@inheritdoc}
   */
  public function __construct(EntityManagerInterface $entity_manager) {
    parent::__construct($entity_manager);
  }

  /**
   * {@inheritdoc}
   */
  public function form(array $form, array &$form_state) {

    $user_restrictions = $this->entity;

    $default = array(
      'name' => $this->t('Username'),
      'mail'    => $this->t('E-mail'),
    );

    $form['type'] = array(
      '#title'       => $this->t('Type'),
      '#description' => $this->t('The type of restriction to be checked against the user.'),
      '#type'        => 'radios',
      '#options'     => $default,
      '#weight'      => '-10',
      '#required'    => TRUE,
    );

    $form['status'] = array(
      '#type' => 'radios',
      '#title' => $this->t('Access Type'),
      '#default_value' => UserRestrictions::ACCESS_TYPE_DENIED,
      '#options' => array($this->t('Denied'), $this->t('Allowed')),
    );

    $period = array(86400, 259200, 604800, 1209600, 1814400, 2592000, 15552000, 31536000);
    $period = array_map('format_interval', array_combine($period, $period));
    $period[UserRestrictions::RESTRICT_PERMANENT] = t('Forever');

    $form['expire'] = array(
      '#type' => 'select',
      '#title' => t('Restriction Expiry'),
      '#default_value' => UserRestrictions::RESTRICT_PERMANENT,
      '#options' => $period,
      '#description' => t('The maximum time a page can be cached. This is used as the value for max-age in Cache-Control headers.'),
    );

    if ($this->operation == 'edit') {
      $form['type']['#default_value'] = $user_restrictions->getType();
      $form['status']['#default_value'] = $user_restrictions->getStatus();
      $form['expire']['#default_value'] = $user_restrictions->getExpireTime();

    }

    return parent::form($form, $form_state, $user_restrictions);
  }

    public function submit(array $form, array &$form_state) {
    // Add the restrict time to the current time to get the future expire time.
    $restriction = parent::submit($form, $form_state);
    $restriction->setExpireTime($form_state['input']['expire']);
  }

  public function validate(array $form, array &$form_state) {
    parent::validate($form, $form_state); // TODO: Change the autogenerated stub
    // TODO valid_email_address()
  }


  /**
   * {@inheritdoc}
   */
  public function save(array $form, array &$form_state) {
    $restriction = $this->entity;
    $restriction->save();
    $form_state['redirect_route']['route_name'] = 'user_restrictions.admin_list';
  }

}